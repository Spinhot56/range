specVersion: 0.0.4
description: Poolshark is a Directional Liquidity AMM allowing LPs to capture directional strength.
repository: https://github.com/poolsharks-protocol/poolshark-range-pool
schema:
    file: ./schema.graphql
dataSources:
    - kind: ethereum/contract
      name: RangePoolFactory
      network: arbitrum-goerli
      source:
          address: '0xf116C41eAf2BA5b6462460abcf2500688dC8C0Fb'
          abi: RangePoolFactory
          startBlock: 29056100
      mapping:
          kind: ethereum/events
          apiVersion: 0.0.6
          language: wasm/assemblyscript
          file: ./src/mappings/rangepoolfactory.ts
          entities:
              - Token
              - RangePool
          abis:
              - name: RangePool
                file: ./abis/RangePool.json
              - name: RangePoolFactory
                file: ./abis/RangePoolFactory.json
              - name: ERC20
                file: ./abis/ERC20.json
              - name: ERC20SymbolBytes
                file: ./abis/ERC20SymbolBytes.json
              - name: ERC20NameBytes
                file: ./abis/ERC20NameBytes.json
          eventHandlers:
              - event: RangePoolCreated(indexed address,indexed address,indexed uint24,address)
                handler: handleRangePoolCreated
    - kind: ethereum/contract
      name: RangePoolManager
      network: arbitrum-goerli
      source:
          address: '0xaD5b90F7133E935dc3FE6F915A4dF8F86171935a'
          abi: RangePoolManager
          startBlock: 29056100
      mapping:
          kind: ethereum/events
          apiVersion: 0.0.6
          language: wasm/assemblyscript
          file: ./src/mappings/rangepoolmanager.ts
          entities:
              - RangePool
              - RangePoolFactory
          abis:
              - name: RangePoolManager
                file: ./abis/RangePoolManager.json
          eventHandlers:
              - event: FeeTierEnabled(uint16,int24)
                handler: handleFeeTierEnabled
              - event: FeeToTransfer(indexed address,indexed address)
                handler: handleFeeToTransfer
              - event: OwnerTransfer(indexed address,indexed address)
                handler: handleOwnerTransfer
              - event: ProtocolFeeCollected(address[],uint128[],uint128[])
                handler: handleProtocolFeeCollected
              - event: ProtocolFeeUpdated(address[],uint16)
                handler: handleProtocolFeeUpdated
              - event: FactoryChanged(indexed address,indexed address)
                handler: handleFactoryChanged
templates:
    - kind: ethereum/contract
      name: RangePoolTemplate
      network: arbitrum-goerli
      source:
          abi: RangePool
      mapping:
          kind: ethereum/events
          apiVersion: 0.0.6
          language: wasm/assemblyscript
          file: ./src/mappings/rangepool.ts
          entities:
              - Token
              - RangePool
              - Position
          abis:
              - name: RangePool
                file: ./abis/RangePool.json
              - name: ERC20
                file: ./abis/ERC20.json
              - name: ERC20SymbolBytes
                file: ./abis/ERC20SymbolBytes.json
              - name: ERC20NameBytes
                file: ./abis/ERC20NameBytes.json
          eventHandlers:
              - event: Swap(indexed address,bool,uint256,uint256,uint160,uint128,int24)
                handler: handleSwap
              - event: Mint(indexed address,int24,int24,indexed uint256,uint128,uint128,uint128,uint128)
                handler: handleMint
              - event: Burn(indexed address,int24,int24,indexed uint256,uint128,uint128,uint128,uint128)
                handler: handleBurn
              - event: Initialize(uint160,int24,int24,int24)
                handler: handleInitialize
              - event: Compound(indexed int24,indexed int24,uint128,uint128,uint128)
                handler: handleCompound
              - event: TransferSingle(indexed address,indexed address,indexed address,uint256,uint256)
                handler: handleTransferSingle
              - event: TransferBatch(indexed address,indexed address,indexed address,uint256[],uint256[])
                handler: handleTransferBatch